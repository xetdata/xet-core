name: commit

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: arduino/setup-protoc@v2
        with:
          version: "23.1"
          repo-token: ${{ secrets.DEV_GITHUB_TOKEN }}
      - uses: dtolnay/rust-toolchain@1.75.0
        with:
          components: clippy
      - uses: actions/github-script@v6
        with:
          script: |
           core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
           core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '')
      - name: Env
        run: |
          env|sort
      - name: Build and run tests on windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression  
          scoop install sccache
          
          # Set environment variables
          $env:SCCACHE_GHA_ENABLED = "on"
          $env:RUSTC_WRAPPER = (Get-Command sccache).Source
          $env:XET_GLOBAL_DEDUP_POLICY = "never"

          # Change directory and build the Rust project
          cd rust
          cargo build --verbose --profile=opt-test

          # Configure Git global settings
          git config --global user.email "operations@xetdata.com"
          git config --global user.name "XetData Automation"

          cargo test --profile=opt-test

          # Run intergration tests
          cd ..
          cd gitxet/
          cargo build --verbose --profile=opt-test
          cargo test --profile=opt-test

      - name: Lint (Linux only)
        if: runner.os == 'Linux'
        run: |
          cd rust
          cargo clippy -r --verbose -- -D warnings # elevates warnings to errors
      - name: Build
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          export RUST_BACKTRACE=1 

          cd rust
          if [ $RUNNER_OS = 'macOS' ]; then
            brew install openssl@3
            # Upgrading make is required for cargo to play nicely with building openssl
            brew install make
            export PATH="/usr/local/opt/make/libexec/gnubin:$PATH"
          fi
          
          cargo build --verbose --features "strict openssl_vendored" 
      - name: Test Environment
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          if [ $RUNNER_OS = 'macOS' ]; then
            brew install md5sha1sum
          fi
          cd rust
          
          # we need a basic git configuration for the tests to pass
          git config --global user.email operations@xetdata.com
          git config --global user.name "XetData Automation"
      - name: Test
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          export RUST_BACKTRACE=1 
          
          cd rust
          cargo test --no-fail-fast --features "strict openssl_vendored"
      - name: Integration tests
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          export RUST_BACKTRACE=1 
          
          cd gitxet
          cargo test --no-fail-fast --features "openssl_vendored"
  build_and_test_pyxet:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_KEY }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Set up Rust 
        uses: dtolnay/rust-toolchain@1.75.0
      - name: Set up Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: "23.1"
          repo-token: ${{ secrets.DEV_GITHUB_TOKEN }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin
      - name: Build with maturin (non-macOS)
        if: runner.os != 'macOS'
        run: |
          cd python/pyxet
          maturin build --features openssl_vendored 
      - name: Build with maturin (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install make
          export PATH="$(dirname $(dirname $(which gmake)))/opt/make/libexec/gnubin:$PATH"
          export MAKE=$(which gmake)
          export CXXFLAGS="-stdlib=libc++"
          cd python/pyxet
          maturin build --features openssl_vendored 
      - name: Unit and integration tests (non-Windows)
        if: runner.os != 'Windows'
        env:
          XET_TEST_USER: ${{ vars.XET_TEST_USER }}
          XET_TEST_EMAIL: ${{ vars.XET_TEST_EMAIL }}
          XET_TEST_TOKEN: ${{ vars.XET_TEST_TOKEN }}
          XET_TEST_REPO: ${{ vars.XET_TEST_REPO }}
        run: |
          cd python/pyxet
          pip install -r tests/requirements.txt
          pip install target/wheels/pyxet*.whl
          pytest tests
      - name: Unit and integration tests (Windows)
        if: runner.os == 'Windows'
        env:
          XET_TEST_USER: ${{ vars.XET_TEST_USER }}
          XET_TEST_EMAIL: ${{ vars.XET_TEST_EMAIL }}
          XET_TEST_TOKEN: ${{ vars.XET_TEST_TOKEN }}
          XET_TEST_REPO: ${{ vars.XET_TEST_REPO }}
        run: |
          cd python/pyxet
          pip install -r tests/requirements.txt
          Get-ChildItem "target/wheels" -Filter pyxet*.whl | Foreach-Object {
            pip install $_.FullName
          }
          cd ..
          python -m pytest pyxet/tests

