name: commit

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: arduino/setup-protoc@v2
        with:
          version: "23.1"
          repo-token: ${{ secrets.DEV_GITHUB_TOKEN }}
      - uses: dtolnay/rust-toolchain@1.76.0
        with:
          components: clippy
      - uses: actions/github-script@v6
        with:
          script: |
           core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
           core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '')
      - name: Env
        run: |
          env|sort
      - name: Build and run tests on windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
          Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression  
          scoop install sccache
          
          # Set environment variables
          $env:SCCACHE_GHA_ENABLED = "on"
          $env:RUSTC_WRAPPER = (Get-Command sccache).Source
          $env:XET_GLOBAL_DEDUP_POLICY = "never"

          # Change directory and build the Rust project
          cd rust
          cargo build --verbose

          # Configure Git global settings
          git config --global user.email "operations@xetdata.com"
          git config --global user.name "XetData Automation"

          cargo test --release
      - name: Lint (Linux only)
        if: runner.os == 'Linux'
        run: |
          cd rust
          cargo clippy -r --verbose -- -D warnings # elevates warnings to errors
      - name: Install sccache (non-windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ $RUNNER_OS = 'macOS' ]; then
              brew install sccache
              cp `which sccache` ./
          else 
              curl -LO https://github.com/mozilla/sccache/releases/download/v0.7.7/sccache-v0.7.7-i686-unknown-linux-musl.tar.gz
              tar xf sccache-v0.7.7-i686-unknown-linux-musl.tar.gz
              cp ./*/sccache ./ 
          fi
          echo "sccache enabled with \"$RUSTC_WRAPPER\""
      - name: Build
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          export SCCACHE_GHA_ENABLED=on
          export RUSTC_WRAPPER="${PWD}/sccache"
          export RUST_BACKTRACE=1 

          cd rust
          if [ $RUNNER_OS = 'macOS' ]; then
            brew install openssl@3
          fi
          
          cargo build --verbose --features "strict"
      - name: Test Environment
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          if [ $RUNNER_OS = 'macOS' ]; then
            brew install md5sha1sum
          fi
          cd rust
          
          # we need a basic git configuration for the tests to pass
          git config --global user.email operations@xetdata.com
          git config --global user.name "XetData Automation"
      - name: Test
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set +x
          export SCCACHE_GHA_ENABLED=on
          export RUSTC_WRAPPER="${PWD}/sccache"
          export RUST_BACKTRACE=1 
          
          cd rust
          cargo test --no-fail-fast --features "strict" 
